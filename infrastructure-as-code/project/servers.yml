Parameters: 
    EnvironmentName: 
        Description: An Environment name that will be prefixed to resources
        Type: String

    EC2AMI:
      Description: AMI to use for our base image
      Type: String

Resources: 
# create an IAM role for S3 Bucket full access
    UdacityS3ReadOnlyEC2:
        Type: "AWS::IAM::Role"
        Properties: 
            AssumeRolePolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - 
                  Effect: "Allow"
                  Principal: 
                    Service: 
                      - "ec2.amazonaws.com"
                  Action: 
                    - "sts:AssumeRole"
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AmazonS3FullAccess
                  
    # Attach an instance profile to the role created
    ServerInstanceProfile: 
        Type: AWS::IAM::InstanceProfile
        Properties: 
          Path: /
          Roles: 
            - !Ref UdacityS3ReadOnlyEC2

    # create a security group for the load balancer
    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to our load balancer
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
  # create another security group this time for the servers
    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to our hosts and SSH from local only
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0

    #create a launch configuration file for the EC2 instances 
    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash  
              apt-get update -y
              apt-get install apache2 -y
              systemctl start apache2.service
              cd /var/www/html
              sudo rm index.html
              sudo wget -P . https://paul-bucket-2022.s3.us-west-2.amazonaws.com/index.html       
          ImageId: !Ref EC2AMI
          # KeyName: "demoserverkey"
          SecurityGroups:
          - Ref: WebServerSecGroup
          InstanceType: t2.medium
          BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: '10'
# create an auto scaling group for the EC2 instances already created
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
            - Fn::ImportValue: !Sub "${EnvironmentName}-PRIVN1-SN"
            - Fn::ImportValue: !Sub "${EnvironmentName}-PRIVN2-SN"
            # - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
            LaunchConfigurationName:
              Ref: WebAppLaunchConfig
            MinSize: '3'
            MaxSize: '5'
            TargetGroupARNs:
            - Ref: WebAppTargetGroup

# attach the instances created to a load balancer and add a listener on Port 80
    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
          Subnets:
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
          SecurityGroups:
          - Ref: LBSecGroup
    
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
          DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: WebAppTargetGroup
          LoadBalancerArn:
            Ref: WebAppLB
          Port: '80'
          Protocol: HTTP
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
          Actions:
          - Type: forward
            TargetGroupArn: !Ref 'WebAppTargetGroup'
          Conditions:
          - Field: path-pattern
            Values: [/]
          ListenerArn: !Ref 'Listener'
          Priority: 1

# attach the instances created to a target group 
    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckIntervalSeconds: 30
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 8
          HealthyThresholdCount: 2
          Port: 80
          Protocol: HTTP
          UnhealthyThresholdCount: 5
          VpcId: 
            Fn::ImportValue:
              Fn::Sub: "${EnvironmentName}-VPCID"

Outputs:

# output for the load balancer details
    LoadBalancer:
      Description: A reference to the Application Load Balancer
      Value: !Ref WebAppLB

  # output for load balancer URL
    LoadBalancerUrl:
      Description: The URL of the ALB
      Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ] ]